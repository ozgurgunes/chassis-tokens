<?xml version="1.0" encoding="UTF-8"?>
<%
var propTypes = {
  size: [
    // 'fontWeights',
    'fontSizes',
    'letterSpacing',
    'lineHeights',
    'paragraphSpacing',
    'typography',
    'textCase',
    'textDecoration'
  ],
  typography: [
    'fontFamilies',
    'fontWeights',
    'fontSizes',
    'letterSpacing',
    'lineHeights',
    'paragraphSpacing',
    'typography',
    'textCase',
    'textDecoration'
  ],
  number: [
    'blur',
    'border',
    'borderRadius',
    'borderWidth',
    'dimension',
    'fontSizes',
    'letterSpacing',
    'lineHeights',
    'paragraphSpacing',
    'radius',
    'sizing',
    'spacing',
    'spread',
    'x',
    'y'
  ],
  string: [
    'fontFamilies',
    'fontWeights',
    'string',
    'textCase',
    'textDecoration'
  ],
  color: ['color'],
  shadow: ['boxShadow'],
  gradient: ['color', 'gradient'],
  border: ['border', 'borderWidth', 'borderRadius']
}
var resourceType = file.resourceType || null;

var resourceMap = file.resourceMap || {
  size: 'dimen',
  color: 'color',
  string: 'string',
  content: 'string',
  time: 'integer',
  number: 'integer'
};

function propToType(prop) {
  if (resourceType) {
    return resourceType;
  }
  for (propType of Object.keys(propTypes)) {
    if (propTypes[propType].includes(prop.type)) {
      if (resourceMap[propType]) {
        return resourceMap[propType];
      }
    }
  }
  return 'string';
}

function propToValue(prop) {
  if (file.options && file.options.outputReferences && dictionary.usesReference(prop.original.value)) {
    return `@${propToType(prop)}/${dictionary.getReferences(prop.original.value)[0].name}`;
  } else {
    return prop.value;
  }
} %>
<%= fileHeader({file, commentStyle: 'xml'}) %>
<resources>
<% dictionary.allTokens.forEach(function(prop) {
  %><<%= propToType(prop) %> name="<%= prop.name %>"><%= propToValue(prop) %></<%= propToType(prop) %>><% if (prop.comment) { %><!-- <%= prop.comment %> --><% } %>
<% }); %>
</resources>