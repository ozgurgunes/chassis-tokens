<%
//
// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// A copy of the License is located at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

%><%= 
fileHeader({file, commentStyle: 'short'}) %><%
var output = '';
output += '// scss-docs-start design-tokens\n';
output += allTokens.map(function(prop){
    let value = ''
    //if (['font'].includes(prop.attributes.category)) {console.log(prop)}
    if (prop.original.rawValue 
        && ['color','space','opacity','borderRadius','borderWidth'].includes(prop.attributes.category) 
        && /^[a-zA-Z0-9\{\}\.-]+$/.test(prop.original.rawValue)
    ) {
        //if (!['color','size','space','borderRadius','borderWidth','opacity'].includes(prop.attributes.category)) {console.log(prop )}
        let token = prop.original.rawValue.slice(1,-1).split('.')
        //if (!['color','size','space','borderRadius','borderWidth'].includes(token[0])) {console.log(token[0] + '-' + token[1])}
        if (token[0] == 'color' && (token[1] == 'body')) {
            // Body Colors
            value = `var(--#{$prefix}${token[2]})`
        } else if (token[0] == 'color' && (token[1] == 'context')) {
            // Context Colors
            value = `var(--#{$prefix}${token[2]}-${token[3]})`
        } else if (token[0] == 'color' && token[1] == 'palette') {
            // Palette Colors
            value = `var(--#{$prefix}${token[2]}-${token[3]})`
        } else if (token[0] == 'space' && token[1] == 'context') {
            // Spacess
            value = `var(--#{$prefix}space-${token[2]})` 
        } else if (token[0] == 'opacity') {
            // Opacities
            // TODO: Not checked!
            value = `var(--#{$prefix}opacity-${token[2]})`
        } else if (token[0] == 'borderRadius' && token[1] == 'context') {
            // Border radiuses
            let _value = token[2].includes('round') ? 'circle' : token[2]
            value = `var(--#{$prefix}border-radius-${_value})` 
        } else if (token[0] == 'borderWidth' && token[1] == 'context') {
            // Border widths
            value = `var(--#{$prefix}border-width-${token[2]})` 
        } else if (token[0] == 'typography' || token[0] == 'font') {
            // Typography
            value = `var(--#{$prefix}${token[token.length-3]}-${token[token.length-2]}-${token[token.length-1]})`
        } else {
            value = prop.value
        }
    } else if (['font'].includes(prop.attributes.category) 
        && (typeof prop.original.rawValue !== 'object')
    ) {
        let token = prop.original.rawValue.slice(1,-1).split('.')
        value = '('+[
            `"font-family": var(--#{$prefix}font-family-${token[1]})`,
            `"font-weight": var(--#{$prefix}font-weight-${token[3]})`,
            `"font-size": var(--#{$prefix}font-size-${token[2]})`,
            `"font-style": normal`,
            `"letter-spacing": ${prop.original.value.letterSpacing}`,
            `"line-height": var(--#{$prefix}line-height-${token[2]})`,
            `"margin-bottom": ${prop.original.value.paragraphSpacing}`,
            `"text-transform": ${prop.original.value.textCase}`,
            `"text-decoration": ${prop.original.value.textDecoration}`,
            ].join(', ')+')'
    } else if (['font','typography'].includes(prop.attributes.category) 
        && (typeof prop.original.rawValue == 'object')
    ) {
        //if (prop.attributes.category == 'font') {console.log(prop)}
        let fontFamily = prop.original.rawValue.fontFamily.slice(1,-1).split('.')[2]
        let fontWeight = prop.original.rawValue.fontWeight.slice(1,-1).split('.')[3]
        let lineHeight = prop.original.rawValue.lineHeight.slice(1,-1).split('.')[3]
        let fontSize = prop.original.rawValue.fontSize.slice(1,-1).split('.')[3]

        value = '('+[
            `"font-family": var(--#{$prefix}font-family-${fontFamily})`,
            `"font-weight": var(--#{$prefix}font-weight-${fontFamily}-${fontWeight})`,
            `"font-size": var(--#{$prefix}font-size-${fontFamily}-${fontSize})`,
            `"font-style": normal`,
            `"letter-spacing": ${prop.rawValue.letterSpacing}`,
            `"line-height": var(--#{$prefix}line-height-${fontFamily}-${lineHeight})`,
            `"margin-bottom": ${prop.rawValue.paragraphSpacing}`,
            `"text-transform": ${prop.rawValue.textCase}`,
            `"text-decoration": ${prop.rawValue.textDecoration}`,
            ].join(', ')+')'
    } else {
        if (['Basic', 'Display', 'Tab', 'Link', 'Article', 'Button', 'Input'].includes(prop.attributes.category)) {
            value = null
        } else {
            value = prop.value
        }
    }
    var line = '';
    if(prop.comment) {
    line += '// ' + prop.comment + '\n';
    }
    line += '$' + prop.name + ': ' + (prop.attributes.category==='asset' ? '"'+value+'"' : value)
    return line;
}).join(' !default;\n');
output += ' !default;\n';
output += '// scss-docs-end design-tokens\n';
print(output);
%>
